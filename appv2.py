import dash
from dash import dcc, html
from dash.dependencies import Input, Output, State
import pandas as pd
import yfinance as yf
import plotly.graph_objs as go
import plotly.figure_factory as ff  # Pour la matrice de corr√©lation

# Initialisation de Dash
app = dash.Dash(__name__)

# Layout de l'application
app.layout = html.Div([
    html.H1("Analyse des Performances Boursi√®res"),

    # üìå Input pour entrer les tickers + bouton de mise √† jour
    dcc.Input(id="input-tickers", type="text", placeholder="Entrez les tickers (ex: MC.PA, BNP.PA, SAN.PA)", style={'width': '50%'}),
    html.Button("Mettre √† jour", id="update-button", n_clicks=0),
   
    # üìå S√©lecteur de dates
    dcc.DatePickerRange(
    id="date-picker",
    min_date_allowed="2000-01-01",  # Date minimale (modifiable)
    max_date_allowed=pd.to_datetime("today").strftime("%Y-%m-%d"),  # Aujourd'hui
    start_date="2019-01-01",  # Date par d√©faut
    end_date=pd.to_datetime("today").strftime("%Y-%m-%d"),  # Aujourd'hui
    display_format="YYYY-MM-DD",
    style={"margin-left": "20px"}),

    # üìå Dropdown pour s√©lectionner les tickers apr√®s mise √† jour
    dcc.Dropdown(id="dropdown-tickers", multi=True, placeholder="S√©lectionnez les actions"),

    # üìå Graphiques affich√©s
    dcc.Graph(id="price-chart"),
    dcc.Graph(id="price-chart-no-index"),
    dcc.Graph(id="cumulative-returns-chart"),
    dcc.Graph(id="volatility-chart"),
    dcc.Graph(id="beta-chart"),
    dcc.Graph(id="sharpe-ratio-chart"),
    dcc.Graph(id="correlation-heatmap"),
])

# Fonction pour r√©cup√©rer les donn√©es des actions demand√©es par l'utilisateur
def fetch_data_dynamic(tickers, start_date, end_date):
    if not tickers:
        return None, None  # Si aucun ticker n'est donn√©

    print(f"\nüîÑ T√©l√©chargement des donn√©es pour : {tickers} de {start_date} √† {end_date}")

    # Ajouter l'indice de r√©f√©rence **seulement s'il n'est pas d√©j√† pr√©sent**
    indice_reference = "^FCHI"
    if indice_reference not in tickers:
        tickers.append(indice_reference)

    # T√©l√©charger les prix des actions avec la p√©riode s√©lectionn√©e
    data = yf.download(tickers, start=start_date, end=end_date)["Close"]

    # V√©rifier que des donn√©es ont bien √©t√© r√©cup√©r√©es
    if data.empty:
        print("‚ùå Aucune donn√©e t√©l√©charg√©e ! V√©rifiez les tickers et la p√©riode.")
        return None, None

    # Calcul des rendements journaliers
    returns = data.pct_change()

    # Calcul des m√©triques financi√®res
    volatility = returns.std() * (252**0.5)
    cov_matrix = returns.cov()
    betas = cov_matrix[indice_reference] / cov_matrix.loc[indice_reference, indice_reference]
    risk_free_rate = 0.025
    annual_returns = returns.mean() * 252
    sharpe_ratios = (annual_returns - risk_free_rate) / volatility

    # Cr√©ation du DataFrame des m√©triques
    metrics_data = pd.DataFrame({
        "Volatilit√©": volatility,
        "Beta": betas,
        "Sharpe Ratio": sharpe_ratios
    })

    print("Donn√©es t√©l√©charg√©es et calcul√©es !")
    return data, metrics_data

@app.callback(
    [Output("dropdown-tickers", "options"),
     Output("dropdown-tickers", "value"),
     Output("price-chart", "figure"),
     Output("price-chart-no-index", "figure"), 
     Output("cumulative-returns-chart", "figure"),
     Output("volatility-chart", "figure"),
     Output("beta-chart", "figure"),
     Output("sharpe-ratio-chart", "figure"),
     Output("correlation-heatmap", "figure")],
    [Input("update-button", "n_clicks")],
    [State("input-tickers", "value"),
     State("date-picker", "start_date"),
     State("date-picker", "end_date")]
)
def update_graphs(n_clicks, tickers_input, start_date, end_date):
    try:
        if not tickers_input:
            return [], None, go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure()

        # S√©parer correctement les tickers entr√©s par l'utilisateur
        tickers = [t.strip().upper() for t in tickers_input.split(",") if t.strip()]

        # V√©rifier qu'on a bien plusieurs tickers
        if not tickers:
            print("‚ùå Aucun ticker valide n'a √©t√© saisi.")
            return [], None, go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure()

        # T√©l√©charger les donn√©es avec la p√©riode s√©lectionn√©e
        df_prices, df_metrics = fetch_data_dynamic(tickers, start_date, end_date)

        # V√©rifier si les donn√©es ont bien √©t√© r√©cup√©r√©es
        if df_prices is None or df_metrics is None or df_prices.empty or df_metrics.empty:
            print("‚ùå Probl√®me lors du chargement des donn√©es.")
            return [], None, go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure()

        # Mettre √† jour les options du dropdown avec les tickers r√©cup√©r√©s
        options = [{"label": t, "value": t} for t in tickers]

        # Graphique des prix
        price_fig = go.Figure()
        for ticker in tickers:
            price_fig.add_trace(go.Scatter(x=df_prices.index, y=df_prices[ticker], mode='lines', name=ticker))
        price_fig.update_layout(title="√âvolution des Prix", xaxis_title="Date", yaxis_title="Prix (‚Ç¨)")

        # Graphique des rendements cumul√©s
        cumulative_returns = (1 + df_prices.pct_change()).cumprod()
        returns_fig = go.Figure()
        for ticker in tickers:
            returns_fig.add_trace(go.Scatter(x=cumulative_returns.index, y=cumulative_returns[ticker], mode='lines', name=ticker))
        returns_fig.update_layout(title="Rendements Cumul√©s", xaxis_title="Date", yaxis_title="Performance Normalis√©e")

        # Graphique de la Volatilit√©
        volatility_fig = go.Figure()
        for ticker in tickers:
            if ticker in df_metrics.index and not pd.isna(df_metrics.loc[ticker, "Volatilit√©"]):
                volatility_fig.add_trace(go.Bar(x=[ticker], y=[df_metrics.loc[ticker, "Volatilit√©"]], name=ticker))
        volatility_fig.update_layout(title="Volatilit√© des Actifs", yaxis_title="Volatilit√© annuelle (%)")

        # Graphique des Betas
        beta_fig = go.Figure()
        for ticker in tickers:
            if ticker in df_metrics.index and not pd.isna(df_metrics.loc[ticker, "Beta"]):
                beta_fig.add_trace(go.Bar(x=[ticker], y=[df_metrics.loc[ticker, "Beta"]], name=ticker))
        beta_fig.update_layout(title="Beta des Actifs par rapport √† l‚ÄôIndice", yaxis_title="Beta")

        # Graphique du Sharpe Ratio
        sharpe_fig = go.Figure()
        for ticker in tickers:
            if ticker in df_metrics.index and not pd.isna(df_metrics.loc[ticker, "Sharpe Ratio"]):
                sharpe_fig.add_trace(go.Bar(x=[ticker], y=[df_metrics.loc[ticker, "Sharpe Ratio"]], name=ticker))
        sharpe_fig.update_layout(title="Sharpe Ratio des Actifs", yaxis_title="Sharpe Ratio")

        # Graphique des prix sans l‚Äôindice
        price_fig_no_index = go.Figure()
        actions_only = [ticker for ticker in tickers if ticker != "^FCHI"]
        for ticker in actions_only:
            price_fig_no_index.add_trace(go.Scatter(x=df_prices.index, y=df_prices[ticker], mode='lines', name=ticker))
        price_fig_no_index.update_layout(title="√âvolution des Prix (Sans l'Indice)", xaxis_title="Date", yaxis_title="Prix (‚Ç¨)")

        # Matrice de corr√©lation
        correlation_matrix = df_prices.pct_change().corr()

        # V√©rifier que la matrice de corr√©lation n'est pas vide
        if correlation_matrix.empty:
            heatmap_fig = go.Figure()
        else:
            heatmap_fig = ff.create_annotated_heatmap(
                z=correlation_matrix.values,
                x=correlation_matrix.columns.tolist(),
                y=correlation_matrix.index.tolist(),
                colorscale="bluered"
            )
            heatmap_fig.update_layout(title="Matrice de Corr√©lation")

        tickers_selected = tickers if tickers else []

        return options, tickers_selected, price_fig, price_fig_no_index, returns_fig, volatility_fig, beta_fig, sharpe_fig, heatmap_fig

    except Exception as e:
        print(f"üö® Erreur dans update_graphs: {str(e)}")
        return [], None, go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure(), go.Figure()

# Lancer l'application
if __name__ == "__main__":
    app.run_server(debug=True)
